name: Release Test

on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Image tag'
        required: true
        default: 'test the action'

env:
  PLATFORMS: "linux/amd64,linux/arm64,linux/ppc64le,linux/s390x,linux/386,linux/arm/v8,linux/arm/v7,linux/arm/v6"
  IMAGE_NAME_PREFIX: "minsdatadocker"

jobs:
  build_and_publish:
    name: Build and Publish Images
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Get latest Docker Hub version
        run: |
          DOCKERHUB_VERSION=$(curl -s https://hub.docker.com/v2/repositories/${IMAGE_NAME_PREFIX}/frps/tags/ | jq -r '.results[].name' | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -rV | head -n 1 | awk -F 'v' '{print $2}')
          echo "DOCKERHUB_VERSION=$DOCKERHUB_VERSION" >> $GITHUB_ENV

      - name: Get FRP Version
        run: |
          FRP_VERSION=$(curl -s https://api.github.com/repos/fatedier/frp/releases/latest | jq -r .tag_name)
          FRP_VERSION=${FRP_VERSION#v}
          echo "FRP_VERSION=$FRP_VERSION" >> $GITHUB_ENV

      - name: Compare versions and skip if same
        run: |
          if [[ "$FRP_VERSION" != "$DOCKERHUB_VERSION" ]]; then
            echo "Versions are the same. Skipping build and publish."
            echo "SKIP_BUILD=true" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Set up QEMU
        if: env.SKIP_BUILD != 'true'
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        if: env.SKIP_BUILD != 'true'
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        if: env.SKIP_BUILD != 'true'
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Build and Push FRPS Docker image
        if: env.SKIP_BUILD != 'true'
        run: |
          DOCKERFILE="./dockerfiles/Dockerfile-for-frps"
          
          docker buildx build -f $DOCKERFILE \
            --build-arg FRP_VERSION=$FRP_VERSION \
            --platform $PLATFORMS \
            -t $IMAGE_NAME_PREFIX/frps:v$FRP_VERSION \
            -t $IMAGE_NAME_PREFIX/frps:latest \
            --push .
          echo "FRPS_IMAGE_TAG=$IMAGE_NAME_PREFIX/frps:v$FRP_VERSION" > frps_image_tag.txt

      - name: Build and Push FRPC Docker image
        if: env.SKIP_BUILD != 'true'
        run: |
          DOCKERFILE="./dockerfiles/Dockerfile-for-frpc"
          
          docker buildx build -f $DOCKERFILE \
            --build-arg FRP_VERSION=$FRP_VERSION \
            --platform $PLATFORMS \
            -t $IMAGE_NAME_PREFIX/frpc:v$FRP_VERSION \
            -t $IMAGE_NAME_PREFIX/frpc:latest \
            --push .
          echo "FRPC_IMAGE_TAG=$IMAGE_NAME_PREFIX/frpc:v$FRP_VERSION" > frpc_image_tag.txt


      - name: Upload FRPS Image Tag
        id: upload_frps_image_tag
        run: echo ${{ steps.build_and_publish.outputs.FRPS_IMAGE_TAG }} > frps_image_tag.txt

      - name: Upload FRPC Image Tag
        id: upload_frpc_image_tag
        run: echo ${{ steps.build_and_publish.outputs.FRPC_IMAGE_TAG }} > frpc_image_tag.txt

      - name: Create Release
        if: env.SKIP_BUILD != 'true'
        uses: actions/create-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.MINSDATA_GITHUB }}
        with:
          tag_name: v${{ env.FRP_VERSION }}
          release_name: Release v${{ env.FRP_VERSION }}
          files: |
            - frps_image_tag.txt
            - frpc_image_tag.txt
          body: |

             ### Docker images  
             - Docker image for FRPS: [${{ env.IMAGE_NAME_PREFIX }}/frps:v${{ env.FRP_VERSION }}](${{ steps.upload_frps_image_tag.outputs.FRPS_IMAGE_TAG }})
             - Docker image for FRPC: [${{ env.IMAGE_NAME_PREFIX }}/frpc:v${{ env.FRP_VERSION }}](${{ steps.upload_frpc_image_tag.outputs.FRPC_IMAGE_TAG }})   

             ### OS/Arch Support  
             - linux/amd64  
             - linux/arm64  
             - linux/arm/v6  
             - linux/arm/v7  
             - linux/arm/v8  
             - linux/386  
             - linux/ppc64le  
             - linux/s390x  
     
             This Docker images are bulit from [fatedier/frp](https://github.com/fatedier/frp) latest relase automatically (100% oringal source code used).
