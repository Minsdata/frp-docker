name: VerCheck Build Push Docker Images to Dockerhub

#on:
#  schedule:
#    - cron: "0 */4 * * *"
on:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Image tag'
        required: true
        default: 'test the action'

env:
  PLATFORMS: "linux/amd64,linux/arm64,linux/ppc64le,linux/s390x,linux/386,linux/arm/v8,linux/arm/v7,linux/arm/v6"
  IMAGE_NAME_PREFIX: "minsdatadocker"

jobs:
  build_and_publish:
    name: Build and Publish Images
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Get latest Docker Hub version
        run: |
          DOCKERHUB_VERSION=$(curl -s https://hub.docker.com/v2/repositories/${IMAGE_NAME_PREFIX}/frps/tags/ | jq -r '.results[].name' | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -rV | head -n 1 | awk -F 'v' '{print $2}')
          echo "DOCKERHUB_VERSION=$DOCKERHUB_VERSION" >> $GITHUB_ENV

      - name: Get FRP Version
        run: |
          FRP_VERSION=$(curl -s https://api.github.com/repos/fatedier/frp/releases/latest | jq -r .tag_name)
          FRP_VERSION=${FRP_VERSION#v}
          echo "FRP_VERSION=$FRP_VERSION" >> $GITHUB_ENV

      - name: Compare versions and skip if same
        run: |
          if [[ "$FRP_VERSION" == "$DOCKERHUB_VERSION" ]]; then
            echo "Versions are the same. Skipping build and publish."
            echo "SKIP_BUILD=true" >> $GITHUB_ENV
          fi
        shell: bash

      - name: Get latest FRP version
        id: get_version
        run: |
          FRP_VERSION=$(curl -s https://api.github.com/repos/fatedier/frp/releases/latest | jq -r .tag_name | cut -c 2-)
          echo "FRP_VERSION=$FRP_VERSION" >> $GITHUB_ENV

      - name: Compress Docker Images
        run: |
          IMAGE_NAME_PREFIX="minsdatadocker"
          mkdir -p compressed_images
          for frp_arch in $FRP_ARCHS; do
            image_tag=$FRP_VERSION
            image_name="${IMAGE_NAME_PREFIX}/frps:${image_tag}"
            new_image_name="${image_name}_${frp_arch}_v${image_tag}.gz"
            docker save $image_name | gzip > compressed_images/$new_image_name
          done

      - name: Zip Compressed Images
        run: |
          mv compressed_images/* frp-archives/
          zip -r frp-archives.zip frp-archives

      - name: Upload GZ Archives as Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: gz-archives
          path: ./frp-archives.zip

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: v${{ env.FRP_VERSION }}-${{ github.run_id }}
          release_name: Release v${{ env.FRP_VERSION }}
          body: Release notes for v${{ env.FRP_VERSION }}  
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.REALSE_TOKEN }}
